package services

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"go-test/internal/models"
)

// SinhalaWriter handles AI-powered Sinhala content generation
type SinhalaWriter struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

// NewSinhalaWriter creates a new Sinhala writer instance
func NewSinhalaWriter(apiKey string) *SinhalaWriter {
	return &SinhalaWriter{
		apiKey:  apiKey,
		baseURL: "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent",
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

// Using existing Gemini types from gemini.go

// WriteAnimePostInMyStyle generates a Sinhala post using AI
func (sw *SinhalaWriter) WriteAnimePostInMyStyle(ctx context.Context, title, summary, link string) (string, error) {
	prompt := sw.buildPersonaPrompt(title, summary, link)
	
	reqBody := GeminiRequest{
		Contents: []GeminiContent{
			{
				Parts: []GeminiPart{
					{Text: prompt},
				},
			},
		},
	}
	
	jsonBody, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("failed to marshal request: %w", err)
	}
	
	req, err := http.NewRequestWithContext(ctx, "POST", sw.baseURL+"?key="+sw.apiKey, bytes.NewBuffer(jsonBody))
	if err != nil {
		return "", fmt.Errorf("failed to create request: %w", err)
	}
	
	req.Header.Set("Content-Type", "application/json")
	
	resp, err := sw.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to make request: %w", err)
	}
	defer resp.Body.Close()
	
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response: %w", err)
	}
	
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API error (status %d): %s", resp.StatusCode, string(body))
	}
	
	var geminiResp GeminiResponse
	if err := json.Unmarshal(body, &geminiResp); err != nil {
		return "", fmt.Errorf("failed to unmarshal response: %w", err)
	}
	
	if len(geminiResp.Candidates) == 0 || len(geminiResp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by AI")
	}
	
	generatedText := geminiResp.Candidates[0].Content.Parts[0].Text
	return strings.TrimSpace(generatedText), nil
}

func (sw *SinhalaWriter) buildPersonaPrompt(title, summary, link string) string {
	return fmt.Sprintf(`**AI System Persona:**

You are 'Anime Api' (අනිමේ ඇපි), a popular anime blogger from Sri Lanka. Your audience is young, energetic Sri Lankan anime fans who follow your social media page for the latest updates. Your writing style is extremely casual, fun, and uses natural, everyday Sinhala mixed with common English words (Singlish). You often use common Sri Lankan expressions and slang to sound more authentic. You must NEVER sound like a formal news reporter or a machine translation. Your goal is to get your followers hyped about the news.

**Writing Style Guidelines:**
- Use casual, conversational Sinhala
- Mix Sinhala with English words naturally (like real Sri Lankan speech)
- Use expressions like "අයියලා", "අක්කලා", "පුලුවන්", "බලන්නකෝ", "එහෙම නම්"
- Add excitement with words like "කට්ටිය", "සුපිරි", "අපරාදේ", "නියමයි"
- Use emojis sparingly but effectively
- Keep it under 250 words
- End with a question to engage followers

**Your Task:**

Write a fun, casual social media post about this anime news. Make it sound like you're talking to your friends. Get them excited about the news!

**News Details:**
- **Title:** %s
- **Summary:** %s
- **Source Link:** %s

Write the post now in your authentic 'Anime Api' style. Remember - sound like a real Sri Lankan anime fan, not a translation!`, title, summary, link)
}

// CreateSinhalaPost creates a complete Sinhala post record
func (sw *SinhalaWriter) CreateSinhalaPost(ctx context.Context, news models.AnimeNews) (*models.SinhalaPost, error) {
	sinhalaText, err := sw.WriteAnimePostInMyStyle(ctx, news.Title, news.Summary, news.Link)
	if err != nil {
		return nil, fmt.Errorf("failed to generate Sinhala text: %w", err)
	}
	
	post := &models.SinhalaPost{
		OriginalNews: news,
		SinhalaText:  sinhalaText,
		CreatedAt:    time.Now(),
	}
	
	return post, nil
}
