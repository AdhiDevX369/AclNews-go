package services

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"go-test/internal/models"
)

// SinhalaWriter handles AI-powered Sinhala content generation
type SinhalaWriter struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

// NewSinhalaWriter creates a new Sinhala writer instance
func NewSinhalaWriter(apiKey string) *SinhalaWriter {
	return &SinhalaWriter{
		apiKey:  apiKey,
		baseURL: "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

// Using existing Gemini types from gemini.go

// WriteAnimePostInMyStyle generates a Sinhala post using AI
func (sw *SinhalaWriter) WriteAnimePostInMyStyle(ctx context.Context, title, summary, link string) (string, error) {
	prompt := sw.buildPersonaPrompt(title, summary, link)

	reqBody := GeminiRequest{
		Contents: []GeminiContent{
			{
				Parts: []GeminiPart{
					{Text: prompt},
				},
			},
		},
	}

	jsonBody, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("failed to marshal request: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", sw.baseURL+"?key="+sw.apiKey, bytes.NewBuffer(jsonBody))
	if err != nil {
		return "", fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := sw.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to make request: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API error (status %d): %s", resp.StatusCode, string(body))
	}

	var geminiResp GeminiResponse
	if err := json.Unmarshal(body, &geminiResp); err != nil {
		return "", fmt.Errorf("failed to unmarshal response: %w", err)
	}

	if len(geminiResp.Candidates) == 0 || len(geminiResp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by AI")
	}

	generatedText := geminiResp.Candidates[0].Content.Parts[0].Text
	return strings.TrimSpace(generatedText), nil
}

func (sw *SinhalaWriter) buildPersonaPrompt(title, summary, link string) string {
	prompt := `You are a casual Sri Lankan anime fan writing for friends. Write in natural Sinhala with mixed English - just like how real Sri Lankans talk. Keep it simple, casual and fun.

**Style:**
- Mix Sinhala and English naturally (like "anime එකක්", "game එක", "trailer එක")
- Use casual words: "අයියේ", "අක්කේ", "කොල්ලා", "කෙල්ලටත්" 
- Common expressions: "ඒකනේ", "මේකද", "කොහොමද", "නේද"
- Keep it short and excited
- Add some emojis
- End with a question

**News:**
Title: %s
Summary: %s
Link: %s

Write a casual post now:`

	return fmt.Sprintf(prompt, title, summary, link)
}

// CreateSinhalaPost creates a complete Sinhala post record
func (sw *SinhalaWriter) CreateSinhalaPost(ctx context.Context, news models.AnimeNews) (*models.SinhalaPost, error) {
	sinhalaText, err := sw.WriteAnimePostInMyStyle(ctx, news.Title, news.Summary, news.Link)
	if err != nil {
		return nil, fmt.Errorf("failed to generate Sinhala text: %w", err)
	}

	post := &models.SinhalaPost{
		OriginalNews: news,
		SinhalaText:  sinhalaText,
		CreatedAt:    time.Now(),
	}

	return post, nil
}
