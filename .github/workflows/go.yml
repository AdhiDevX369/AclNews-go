# Anime News AI - Comprehensive CI/CD Pipeline
# This workflow builds, tests, and validates the Go application with security checks

name: Anime News AI - CI/CD

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.59'

jobs:
  # ===========================================================================
  # BUILD AND TEST JOB
  # ===========================================================================
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.20', '1.21']
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download Dependencies
      run: go mod download

    - name: Verify Dependencies
      run: go mod verify

    - name: Build Application
      run: |
        make build
        # Verify binary was created
        test -f bin/anime-news-ai

    - name: Run Tests
      run: make test

    - name: Generate Test Coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload Coverage Artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.go-version }}
        path: coverage.html

  # ===========================================================================
  # CODE QUALITY JOB
  # ===========================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Download Dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

    - name: Check Code Formatting
      run: |
        if ! gofmt -l . | grep -q '^$'; then
          echo "‚ùå Code is not properly formatted. Files that need formatting:"
          gofmt -l .
          echo "Run 'make fmt' to fix."
          exit 1
        fi
        echo "‚úÖ Code is properly formatted"

    - name: Run Static Analysis
      run: make lint

  # ===========================================================================
  # SECURITY JOB
  # ===========================================================================
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Download Dependencies
      run: go mod download

    - name: Install Security Tools
      run: make security-install

    - name: Run Vulnerability Check
      run: make security-vuln

    - name: Run Static Security Analysis
      run: make security-static

    - name: Check Dependencies for Known Vulnerabilities
      run: make security-deps

  # ===========================================================================
  # DOCKER BUILD JOB
  # ===========================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: anime-news-ai:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Image
      run: |
        docker run --rm anime-news-ai:latest --version || echo "‚úÖ Docker image built successfully"

  # ===========================================================================
  # RELEASE JOB (only on main/master)
  # ===========================================================================
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, quality, security, docker]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build Release Binaries
      run: |
        make build-all
        ls -la bin/

    - name: Create Release Archive
      run: |
        mkdir -p release
        tar -czf release/anime-news-ai-linux-amd64.tar.gz -C bin anime-news-ai-linux
        tar -czf release/anime-news-ai-windows-amd64.tar.gz -C bin anime-news-ai-windows.exe
        tar -czf release/anime-news-ai-darwin-amd64.tar.gz -C bin anime-news-ai-darwin

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: release/

  # ===========================================================================
  # NOTIFICATION JOB
  # ===========================================================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.test.result == 'success' && needs.quality.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "‚úÖ All checks passed successfully!"
        echo "üöÄ Anime News AI is ready for deployment!"

    - name: Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.quality.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed!"
        echo "üîç Please review the failed jobs and fix the issues."
        exit 1
